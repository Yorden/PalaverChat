{
  "name": "acquit-ignore",
  "version": "0.0.1",
  "description": "Acquit plugin for removing lines of code from output",
  "main": "index.js",
  "scripts": {
    "test": "NODE_PATH=../ mocha --harmony test/*",
    "test-coverage": "NODE_PATH=../ istanbul cover _mocha -- --harmony -R spec ./test/*"
  },
  "author": {
    "name": "Valeri Karpov",
    "email": "val@karpov.io"
  },
  "license": "Apache 2.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/vkarpov15/acquit.git"
  },
  "peerDependencies": {
    "acquit": "~0.3"
  },
  "jscsConfig": {
    "preset": "airbnb",
    "requirePaddingNewLinesAfterBlocks": null,
    "requireMultipleVarDecl": null,
    "requireTrailingComma": null
  },
  "devDependencies": {
    "acquit": "~0.3",
    "istanbul": "0.3.5",
    "mocha": "2.0.1"
  },
  "readme": "# acquit-ignore\n\nAcquit plugin for removing lines of code from output\n\n[![Build Status](https://travis-ci.org/vkarpov15/acquit-ignore.svg?branch=master)](https://travis-ci.org/vkarpov15/acquit-ignore)\n[![Coverage Status](https://coveralls.io/repos/vkarpov15/acquit-ignore/badge.svg?branch=master&service=github)](https://coveralls.io/github/vkarpov15/acquit-ignore?branch=master)\n\n## acquit-ignore\n\n#### It removes code between delimiters\n\nBy default, `acquit-ignore` will attach a transform to acquit\nthat removes any code in a block that's between\n'// acquit:ignore:start' and '// acquit:ignore:end'.\n\n```javascript\n    \n    var acquit = require('acquit');\n    require('acquit-ignore')();\n\n    var contents = [\n      'describe(\\'test\\', function() {',\n      '  it(\\'works\\', function(done) {',\n      '    var x = 1;',\n      '    // acquit:ignore:start',\n      '    assert.equal(x, 1);',\n      '    // acquit:ignore:end',\n      '',\n      '    setTimeout(function() {',\n      '      assert.equal(x, 2);',\n      '      // acquit:ignore:start',\n      '      done();',\n      '      // acquit:ignore:end',\n      '    }, 0);',\n      '    ++x;',\n      '  });',\n      '});'\n    ].join('\\n');\n\n    var blocks = acquit.parse(contents);\n    assert.equal(blocks.length, 1);\n    assert.equal(blocks[0].blocks[0].contents, 'works');\n\n    var expectedCode = [\n      '',\n      '    var x = 1;',\n      '',\n      '    setTimeout(function() {',\n      '      assert.equal(x, 2);',\n      '    }, 0);',\n      '    ++x;',\n      '  '\n    ].join('\\n');\n\n    assert.equal(blocks[0].blocks[0].code, expectedCode);\n  \n```\n\n#### It supports custom delimiters\n\nDon't like 'acquit:ignore:start' and 'acquit:ignore:end'?\nSet your own by setting the 'start' and 'end' options.\n\n```javascript\n    \n    var acquit = require('acquit');\n    require('acquit-ignore')({\n      start: '// bacon',\n      end: '// eggs'\n    });\n\n    var contents = [\n      'describe(\\'test\\', function() {',\n      '  it(\\'works\\', function(done) {',\n      '    var x = 1;',\n      '    // acquit:ignore:start',\n      '    assert.equal(x, 1);',\n      '    // acquit:ignore:end',\n      '',\n      '    setTimeout(function() {',\n      '      assert.equal(x, 2);',\n      '      // bacon',\n      '      done();',\n      '      // eggs',\n      '    }, 0);',\n      '    ++x;',\n      '  });',\n      '});'\n    ].join('\\n');\n\n    var blocks = acquit.parse(contents);\n    assert.equal(blocks.length, 1);\n    assert.equal(blocks[0].blocks[0].contents, 'works');\n\n    var expectedCode = [\n      '',\n      '    var x = 1;',\n      '    // acquit:ignore:start',\n      '    assert.equal(x, 1);',\n      '    // acquit:ignore:end',\n      '',\n      '    setTimeout(function() {',\n      '      assert.equal(x, 2);',\n      '    }, 0);',\n      '    ++x;',\n      '  '\n    ].join('\\n');\n\n    assert.equal(blocks[0].blocks[0].code, expectedCode);\n  \n```\n\n#### It can accept an acquit instance\n\nBy default, acquit-ignore attaches itself to the acquit\nsingleton. However, you can also attach it to an acquit\ninstance.\n\n```javascript\n    \n    var instance = require('acquit')();\n    require('acquit-ignore')(instance, {\n      start: '// bacon',\n      end: '// eggs'\n    });\n\n    var contents = [\n      'describe(\\'test\\', function() {',\n      '  it(\\'works\\', function(done) {',\n      '    var x = 1;',\n      '    // bacon',\n      '    assert.equal(x, 1);',\n      '    // eggs',\n      '',\n      '    setTimeout(function() {',\n      '      assert.equal(x, 2);',\n      '      // bacon',\n      '      done();',\n      '      // eggs',\n      '    }, 0);',\n      '    ++x;',\n      '  });',\n      '});'\n    ].join('\\n');\n\n    var blocks = instance.parse(contents);\n    assert.equal(blocks.length, 1);\n    assert.equal(blocks[0].blocks[0].contents, 'works');\n\n    var expectedCode = [\n      '',\n      '    var x = 1;',\n      '',\n      '    setTimeout(function() {',\n      '      assert.equal(x, 2);',\n      '    }, 0);',\n      '    ++x;',\n      '  '\n    ].join('\\n');\n\n    assert.equal(blocks[0].blocks[0].code, expectedCode);\n  \n```\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/vkarpov15/acquit/issues"
  },
  "_id": "acquit-ignore@0.0.1",
  "_from": "acquit-ignore@0.0.1"
}
