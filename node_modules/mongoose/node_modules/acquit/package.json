{
  "name": "acquit",
  "version": "0.3.0",
  "description": "Parse BDD-style tests (Mocha, Jasmine) to generate documentation",
  "main": "index.js",
  "scripts": {
    "test": "mocha test/*",
    "test-coverage": "istanbul cover _mocha -- -R spec ./test/*",
    "watch": "gulp watch"
  },
  "author": {
    "name": "Valeri Karpov",
    "email": "val@karpov.io"
  },
  "license": "Apache 2.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/vkarpov15/acquit.git"
  },
  "dependencies": {
    "commander": "2.5.0",
    "esprima": "https://github.com/ariya/esprima/archive/85fc2f4b6ad109a86d80d9821f52b5b38d0105c0.tar.gz",
    "marked": "0.3.2",
    "underscore": "1.5.2"
  },
  "jscsConfig": {
    "preset": "airbnb",
    "requirePaddingNewLinesAfterBlocks": null,
    "requireMultipleVarDecl": null,
    "requireTrailingComma": null
  },
  "devDependencies": {
    "gulp": "3.8.11",
    "gulp-jscs": "2.0.0",
    "gulp-mocha": "2.0.0",
    "istanbul": "0.3.5",
    "jscs": "1.9.0",
    "mocha": "2.0.1"
  },
  "readme": "# acquit\n\nParse BDD-style tests (Mocha, Jasmine) to generate documentation\n\n[![Build Status](https://travis-ci.org/vkarpov15/acquit.svg?branch=master)](https://travis-ci.org/vkarpov15/acquit)\n[![Coverage Status](https://coveralls.io/repos/vkarpov15/acquit/badge.svg?branch=master&service=github)](https://coveralls.io/github/vkarpov15/acquit?branch=master)\n\n## `acquit.parse()`\n\n#### It can parse Mocha tests into `blocks`\n\nAcquit's `parse()` function takes in mocha tests as a string, and outputs\na list of \"blocks\", which are either `describe` or `it` calls. A `describe`\ncall contains a list of \"blocks\", whereas an `it` call contains the actual\n`code` in order to provide an effective, well-tested example.\n\n```javascript\n    \n    var contents =\n      '/**\\n' +\n      ' * A `Model` is a convenience wrapper around objects stored in a\\n' +\n      ' * collection\\n' +\n      ' */\\n' +\n      'describe(\\'Model\\', function() {\\n' +\n      '  /**\\n' +\n      '   * Model **should** be able to save stuff\\n' +\n      '   **/\\n' +\n      '  it(\\'can save\\', function() {\\n' +\n      '    assert.ok(1);\\n' +\n      '  });\\n' +\n      '\\n' +\n      '  it(\\'can save with a parameter\\', function() {\\n' +\n      '  });\\n' +\n      '});';\n\n    var ret = acquit.parse(contents);\n\n    // One top-level block: describe('Model')\n    assert.equal(1, ret.length);\n    assert.equal('describe', ret[0].type);\n    assert.equal(1, ret[0].comments.length);\n    assert.ok(ret[0].comments[0].indexOf('`Model`') != -1);\n\n    // Top-level block contains the `it('can save')` block, which contains\n    // the code\n    assert.equal(2, ret[0].blocks.length);\n    assert.equal('it', ret[0].blocks[0].type);\n    assert.equal(1, ret[0].blocks[0].comments.length);\n    assert.ok(ret[0].blocks[0].code.indexOf('assert.ok(1)') !== -1);\n    assert.equal('can save', ret[0].blocks[0].contents);\n\n    assert.equal('it', ret[0].blocks[1].type);\n    assert.equal('can save with a parameter', ret[0].blocks[1].contents);\n    assert.equal(0, ret[0].blocks[1].comments.length);\n  \n```\n\n#### It can call user function on `code` block and save return value\n\nAcquit can also take a callback as second parameter. This callback gets\nexecuted on every block and can transform the block however you want.\n\n```javascript\n    \n    var contents =\n      'describe(\\'ES6\\', function() {\\n' +\n      '  // ES6 has a `yield` keyword\\n' +\n      '  it(\\'should be able to yield\\', function() {\\n' +\n      '    // some code\\n' +\n      '  });\\n' +\n      '});';\n\n    var cb = function(block) {\n      block.code = 'return value from callback';\n    };\n\n    var ret = acquit.parse(contents, cb);\n\n    assert.equal('return value from callback', ret[0].blocks[0].code);\n  \n```\n\n#### It can define transforms\n\nWant to chain multiple callbacks together and/or develop re-usable\nplugins? `acquit.transform()` allows you to add transformations that\nare executed each time you call `.parse()`.\n\nTransform functions are executed in order **before** the callback\nfunction passed to `.parse()`.\n\n```javascript\n    \n    var contents =\n      'describe(\\'ES6\\', function() {\\n' +\n      '  // ES6 has a `yield` keyword\\n' +\n      '  it(\\'should be able to yield\\', function() {\\n' +\n      '    // some code\\n' +\n      '  });\\n' +\n      '});';\n\n    var cb = function(block) {\n      block.code = 'my transformed code';\n    };\n\n    acquit.transform(cb);\n\n    var ret = acquit.parse(contents);\n\n    assert.equal('my transformed code', ret[0].blocks[0].code);\n    acquit.removeAllTransforms();\n  \n```\n\n#### It can parse the ES6 `yield` keyword\n\nAcquit can also parse ES6 code\n\n```javascript\n    \n    var contents =\n      'describe(\\'ES6\\', function() {\\n' +\n      '  // ES6 has a `yield` keyword\\n' +\n      '  it(\\'should be able to yield\\', function() {\\n' +\n      '    co(function*() {\\n' +\n      '      yield 1;\\n' +\n      '    })();\\n' +\n      '  });\\n' +\n      '});';\n\n    var ret = acquit.parse(contents);\n\n    assert.equal(1, ret.length);\n    assert.equal('describe', ret[0].type);\n    assert.equal(0, ret[0].comments.length);\n    assert.equal(1, ret[0].blocks.length);\n    assert.equal('it', ret[0].blocks[0].type);\n    assert.equal(1, ret[0].blocks[0].comments.length);\n    assert.ok(ret[0].blocks[0].code);\n  \n```\n\n## `acquit.trimEachLine()`\n\n#### It strips out whitespace and asterisks in multiline comments\n\n`trimEachLine()` is a helper function for trimming whitespace and asterisks\nfrom JSdoc-style comments\n\n```javascript\n    \n    var str = '  * This comment looks like a \\n' +\n      '  * parsed JSdoc-style comment';\n\n    assert.equal(acquit.trimEachLine(str), 'This comment looks like a\\n' +\n      'parsed JSdoc-style comment');\n  \n```\n\n#### It strips out whitespace and asterisks in multiline comments\n\nYou don't have to use JSdoc-style comments: `trimEachLine()` also trims\nleading and trailing whitespace.\n\n```javascript\n    \n    var str = 'This comment looks like a \\n' +\n      '  * parsed JSdoc-style comment';\n\n    assert.equal(acquit.trimEachLine(str), 'This comment looks like a\\n' +\n      'parsed JSdoc-style comment');\n  \n```\n\n## `acquit()` constructor\n\n#### It creates a new instance with its own set of transforms\n\nYou can also use acquit as a constructor, in case you need\nmultiple sets of transforms.\n\n```javascript\n    \n    acquit.transform(function(block) {});\n    assert.equal(acquit.getTransforms().length, 1);\n\n    var parser = acquit();\n    assert.equal(parser.getTransforms().length, 1);\n\n    parser.transform(function(block) {});\n    assert.equal(parser.getTransforms().length, 2);\n\n    parser.removeAllTransforms();\n    assert.equal(parser.getTransforms().length, 0);\n    assert.equal(acquit.getTransforms().length, 1);\n\n    assert.equal(parser.parse('describe(\"test\", function() {});').length,\n      1);\n  \n```\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/vkarpov15/acquit/issues"
  },
  "_id": "acquit@0.3.0",
  "_from": "acquit@0.3.0"
}
